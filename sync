#!/usr/bin/env python3
'''
Utility script to perform synchronization operations.
'''
import argparse
import configparser
import CloudFlare
import glob
import logging
import os
import yaml


def main():
    '''
    Primary script logic
    '''
    # Prepare
    options = parser().parse_args()
    logging.getLogger().setLevel(options.loglevel.upper())

    # Get expected data
    logging.debug(f'Reading input data from {options.data}')
    source_data = flatten_source(load_yaml(options.data))

    # Set default values
    for tag, data in source_data.items():
        # type: forward OR cname
        if 'type' not in data:
            # Pages targets
            if any(s in data['target']
                   for s in [
                       'github.io',
                       'gitlab.io',
                       'pages.dev',
                       ]):
                data['type'] = 'cname'
            else:
                data['type'] = 'forward'

    # Generate an nginx map file
    if options.genmap:
        logging.info(f'Generating nginx map file at {options.mapfile}')
        make_map(source_data, options.mapfile)

    # Sync DNS records with current provider
    if options.records:
        logging.info('Synchronizing DNS with cloudflare')
        sync_cloudflare(source_data)


def parser():
    '''
    Load and parse command line arguments
    '''
    # Template
    parser = argparse.ArgumentParser(
            usage='sync [-h] [actions] <options>',
            description='Synchronize hugo/ data with other destination.',
            epilog='At least one [action] must be provided.',
            formatter_class=lambda prog: argparse.HelpFormatter(
                prog, max_help_position=30))

    # Actions
    actions = parser.add_argument_group('actions')
    actions.add_argument(
        '-n',
        dest='genmap',
        action='store_true',
        help='Generate an nginx map file')
    actions.add_argument(
        '-r',
        dest='records',
        action='store_true',
        help='Synchronize DNS records')

    # Options
    parser.add_argument(
        '-m',
        dest='mapfile',
        action='store',
        metavar='<path>',
        default='/etc/nginx/canonical_redirects.map',
        help='Location of generated Nginx map file')
    parser.add_argument(
        '-d',
        dest='data',
        action='store',
        metavar='<path>',
        default='./data/domains.yaml',
        help='YAML file containing DNS data')
    parser.add_argument(
        '-l',
        dest='loglevel',
        action='store',
        metavar='<level>',
        default='INFO',
        help='Log level (DEBUG, INFO*, WARNING, ERROR)')

    return parser


def load_yaml(fpath='data/domains.yaml'):
    '''
    Returns an object from a yaml file (or directory of yaml files)
    '''
    fpath = fpath.rstrip('/')
    # if fpath is a file
    if os.path.isfile(fpath):
        return yaml.load(open(fpath, 'r', encoding='utf-8'), Loader=yaml.SafeLoader)
    # if fpath is a directory when .yaml is removed
    if not os.path.isdir(fpath) and os.path.isdir(fpath.rstrip('.yaml')):
        fpath = fpath.rstrip('.yaml')
    # if fpath a directory
    if os.path.isdir(fpath):
        m = {}
        for path in glob.glob(f'{fpath}/*'):
            if '.yaml' not in path:
                continue
            tag = path.replace(f'{fpath}/', '', 1).replace('.yaml', '')
            m[tag] = yaml.load(open(path, 'r', encoding='utf-8'), Loader=yaml.SafeLoader)
        return m
    raise Exception('Could not load yaml data')


def flatten_source(original):
    '''
    Return dictionary with one key for each subdomain
    '''
    return {subk: subv for k, v in original.items() for subk, subv in v.items()}


def make_map(data, path='/etc/nginx/canonical_redirects.map'):
    '''
    Create an nginx map file from source data
    '''
    with open(path, 'w') as fh:
        for subdomain, meta in data.items():
            # Only consider domain forwards on this server.
            if meta['type'].lower() != 'forward':
                continue
            # Append line for external redirect
            fh.write(f'{subdomain}.sobersupport.group\t{meta["target"]};\n')


def sync_cloudflare(source_data, zone=None):
    '''
    Verify that source data is in sync with cloudflare DNS.
    '''
    cf = CloudFlare.CloudFlare()

    # Read zone from configuration if it was not provided
    if not zone:
        config = configparser.ConfigParser()
        config.read(os.path.join(os.path.expanduser('~'), '.cloudflare.cfg'))
        zone = config['CloudFlare']['zone']

    # Get current records
    current_records = {}
    for record in cf.zones.dns_records.get(zone):
        # Skip unmanaged records
        if record.get('comment') != 'sync-managed':
            logging.debug(f'Skipping unmanaged record: {record["id"]}')
            continue
        current_records[record['name'].partition('.')[0]] = record

    # Pre-sync prune
    for subdomain, record in dict(current_records).items():
        rminfo = f'{record["name"]} {record["type"]} {record["content"]}'

        # Delete managed CF records no longer in source data
        if subdomain not in source_data:
            logging.warning(f'Deleting unmatch record: {rminfo}')
            cf.zones.dns_records.delete(zone, record['id'])

        # Delete forwards (handled by catch-all)
        elif source_data[subdomain]['type'].lower() == 'forward':
            logging.warning(f'Deleting forwarded record: {rminfo}')
            cf.zones.dns_records.delete(zone, record['id'])

        # Delete if type needs to change
        elif record['type'].upper() != source_data[subdomain]['type'].upper():
            logging.warning(f'Deleting record with wrong type: {rminfo}')
            cf.zones.dns_records.delete(zone, record['id'])
            del current_records[subdomain]

    # Verify expected records against current state
    for subdomain, record in source_data.items():
        # Forwards are handled by DNS catch-all
        if record['type'] == 'forward':
            continue

        # Create record if it does not exist
        elif subdomain not in current_records:
            logging.info(f'Creating record for {subdomain}')
            cf.zones.dns_records.post(zone, data={
                'type': record['type'].upper(),
                'name': f'{subdomain}.sobersupport.group',
                'content': record['target'],
                'proxied': record.get('cache', False),
                'comment': 'sync-managed',
                })

        # Update record if current values are incorrect
        elif (record.get('cache', False) != current_records[subdomain]['proxied']
              or record['target'] != current_records[subdomain]['content']):
            logging.info(f'Updating record values for {subdomain}')
            cf.zones.dns_records.put(zone, current_records[subdomain]['id'], data={
                'type': record['type'].upper(),
                'name': f'{subdomain}.sobersupport.group',
                'content': record['target'],
                'proxied': record.get('cache', False),
                'comment': 'sync-managed',
                })


if __name__ == '__main__':
    main()
